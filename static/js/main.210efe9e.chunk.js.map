{"version":3,"sources":["progress/CircularProgressWithLabel.js","progress/BorderLinearProgress.js","App.js","index.js"],"names":["useStylesFacebook","makeStyles","theme","root","position","bottom","color","palette","grey","type","top","left","circle","strokeLinecap","CircularProgressWithLabel","props","classes","Box","display","CircularProgress","variant","className","thickness","value","right","alignItems","justifyContent","Typography","component","timetext","BorderLinearProgress","withStyles","height","borderRadius","colorPrimary","backgroundColor","bar","LinearProgress","progressTypeConstant","useStyles","margin","spacing","textAlign","buttonGroup","progressBar","marginTop","App","nodeRef","useRef","useState","alertOpen","setAlertOpen","minutes","setMinutes","seconds","setSeconds","isStart","text","toggleGroup","setToggleGroup","progress","setProgress","progressType","setProgressType","secondsFormat","timeText","useEffect","timer","setInterval","prev","clearInterval","ref","Collapse","in","Alert","action","IconButton","size","onClick","fontSize","Button","disabled","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.210efe9e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStylesFacebook = makeStyles((theme) => ({\n  root: {\n    position: \"relative\"\n  },\n  bottom: {\n    color: theme.palette.grey[theme.palette.type === \"light\" ? 200 : 700]\n  },\n  top: {\n    color: \"#1a90ff\",\n    position: \"absolute\",\n    left: 0\n  },\n  circle: {\n    strokeLinecap: \"round\"\n  }\n}));\nfunction CircularProgressWithLabel(props) {\n  const classes = useStylesFacebook();\n  return (\n    <Box position=\"relative\" display=\"inline-flex\">\n      <CircularProgress\n        variant=\"determinate\"\n        className={classes.bottom}\n        thickness={4}\n        {...props}\n        value={100}\n      />\n      <CircularProgress\n        className={classes.top}\n        classes={{\n          circle: classes.circle\n        }}\n        color=\"secondary\"\n        variant=\"determinate\"\n        {...props}\n      />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h5\" component=\"div\" color=\"secondary\">\n          {props.timetext}\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n\nCircularProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired\n};\n\nexport default CircularProgressWithLabel;\n","import { withStyles } from \"@material-ui/core/styles\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor:\r\n      theme.palette.grey[theme.palette.type === \"light\" ? 200 : 700]\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#1a90ff\"\r\n  }\r\n}))(LinearProgress);\r\n\r\nexport default BorderLinearProgress;\r\n","import { useEffect, useRef, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgressWithLabel from \"./progress/CircularProgressWithLabel\";\nimport BorderLinearProgress from \"./progress/BorderLinearProgress\";\nimport { Typography } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst progressTypeConstant = {\n  linear: 0,\n  circle: 1,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      textAlign: \"center\",\n    },\n  },\n  buttonGroup: {\n    \"& > button\": {\n      margin: 5,\n    },\n  },\n  progressBar: {\n    \"&\": {\n      marginTop: 5,\n    },\n  },\n  circle: {\n    strokeLinecap: \"round\",\n  },\n}));\nconst totalSeconds = 25 * 60;\nexport default function App() {\n  const nodeRef = useRef(null);\n  const [alertOpen, setAlertOpen] = useState(false);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const [toggleGroup, setToggleGroup] = useState({\n    isStart: false,\n    text: \"Start\",\n  });\n  const [progress, setProgress] = useState(0);\n  const [progressType, setProgressType] = useState(\n    progressTypeConstant[\"circle\"]\n  );\n  const classes = useStyles();\n\n  let minuteFormat = minutes < 10 ? \"0\" + minutes : minutes;\n  let secondsFormat = seconds < 10 ? \"0\" + seconds : seconds;\n  let timeText = `${minuteFormat} : ${secondsFormat}`;\n  useEffect(() => {\n    if (toggleGroup.isStart) {\n      const timer = setInterval(() => {\n        let currentSeconds = minutes * 60 + seconds - 1;\n        let secondsToGo = totalSeconds - currentSeconds;\n        let percentage = (secondsToGo / totalSeconds) * 100;\n        setProgress(percentage);\n        if (minutes === 0 && seconds === 0) {\n          setToggleGroup((prev) => ({\n            ...prev,\n            isStart: false,\n            text: \"Start\",\n          }));\n          setMinutes(25);\n          setSeconds(0);\n          setProgress(0);\n          setAlertOpen(true);\n        } else {\n          if (seconds === 0) {\n            setSeconds(59);\n            setMinutes((prev) => prev - 1);\n          } else {\n            setSeconds((prev) => prev - 1);\n          }\n        }\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [seconds, minutes, toggleGroup.isStart]);\n\n  const handleToggle = () => {\n    setToggleGroup((prev) => ({\n      ...prev,\n      isStart: !prev.isStart,\n      text: prev.isStart ? \"Start\" : \"Stop\",\n    }));\n  };\n  const handleReset = () => {\n    setMinutes(25);\n    setSeconds(0);\n    setProgress(0);\n  };\n\n  const handleProgressType = () => {\n    setProgressType((prev) => !prev);\n  };\n  return (\n    <div className={classes.root} ref={nodeRef}>\n      <Collapse in={alertOpen}>\n        <Alert\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => {\n                setAlertOpen(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n          Close me!\n        </Alert>\n      </Collapse>\n      <div className={classes.progressBar}>\n        {progressType ? (\n          <>\n            <Typography variant=\"h5\" component=\"div\" color=\"secondary\">\n              {timeText}\n            </Typography>\n            <BorderLinearProgress variant=\"determinate\" value={progress} />\n          </>\n        ) : (\n          <CircularProgressWithLabel\n            size={100}\n            value={progress}\n            timetext={timeText}\n            classes={{\n              circle: classes.circle,\n            }}\n          />\n        )}\n      </div>\n      <div className={classes.buttonGroup}>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleToggle}>\n          {toggleGroup.text}\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleReset}\n          disabled={toggleGroup.isStart}\n        >\n          Reset\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleProgressType}\n        >\n          Progress Type\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}